# This workfow shows how to build a Docker image, tag and push it to DigitalOcean Container Registry, and
# deploy the application on a DIgitalOcean Kubernetes cluster. For description to the entire worklow, 
# see www.digitalocean.com/docs/kubernetes/how-to/deploy-using-github-actions.

name: Build, push, and deploy

# Controls when the action will run.
on:
  # Triggers the workflow on push request on the main branch for changes in the specified paths.
  push:
    branches:
      - master
  workflow_dispatch:
# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # This workflow contains a single job called "build".
  build:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
    # - name: Checkout master
    #   uses: actions/checkout@main
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: '14'
    # ESLint 7.x uses `} catch {` which isn't supported in Node 8
    # - run: npm run lint
    # - run: npm t
    # Only run the coverage once
    - run: yarn install
    - name: Get Coverage for badge
      run: |
        # var SUMMARY = [
        #   '',
        #   '=============================== Coverage summary ===============================',
        #   'Statements   : 32.5% ( 39/120 )',
        #   'Branches     : 38.89% ( 21/54 )',
        #   'Functions    : 21.74% ( 5/23 )',
        #   'Lines        : 31.93% ( 38/119 )',
        #   '================================================================================',
        #   ''
        # ];
        # SUMMARY = SUMMARY.split('\n')[5]; // 'Lines        : 31.93% ( 38/119 )'
        # SUMMARY = SUMMARY.split(':')[1].split('(')[0].trim(); // '31.93%'
        SUMMARY="$(yarn test --silent --ci --coverage --coverageReporters="text" --coverageReporters='text-summary' | tail -2 | head -1)"
        TOKENS=($SUMMARY)
        # process.env.COVERAGE = '31.93%';
        echo "COVERAGE=$(echo ${TOKENS[2]})" >> $GITHUB_ENV

        # var REF = 'refs/pull/27/merge.json';
        REF=${{ github.ref }}
        # console.log('github.ref: ' + REF);
        echo "github.ref: $REF"
        # var PATHS = REF.split('/');
        IFS='/' read -ra PATHS <<< "$REF"
        # var BRANCH_NAME = PATHS[1] + PATHS[2];
        BRANCH_NAME="${PATHS[1]}_${PATHS[2]}"
        # console.log(BRANCH_NAME); // 'pull_27'
        echo $BRANCH_NAME
        # process.env.BRANCH = 'pull_27';
        echo "BRANCH=$(echo ${BRANCH_NAME})" >> $GITHUB_ENV
    - name: Create the Badge
      uses: schneegans/dynamic-badges-action@v1.0.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: a87e32a5efd1686be86c338fa404872a
        filename: react-typescript-data-gen__${{ env.BRANCH }}.json
        label: Test Coverage
        message: ${{ env.COVERAGE }}
        color: green
        namedLogo: jest
    # Install doctl.
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    # Build a Docker image of your application in your registry and tag the image with the $GITHUB_SHA.
    - name: Build container image
      run: docker build -t registry.digitalocean.com/nevermind/react-typescript-data-gen:$(echo $GITHUB_SHA | head -c7) .

    - name: Log in to DigitalOcean Container Registry with short-lived credentials
      run: doctl registry login --expiry-seconds 1200

    - name: Push image to DigitalOcean Container Registry
      run: docker push registry.digitalocean.com/nevermind/react-typescript-data-gen:$(echo $GITHUB_SHA | head -c7)

    # Deploy to DigitalOCcean Kubernetes.
    - name: Update deployment file
      run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE>|registry.digitalocean.com/nevermind/react-typescript-data-gen:'${TAG}'|' $GITHUB_WORKSPACE/config/deployment.yml

    - name: Save DigitalOcean kubeconfig with short-lived credentials
      run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 k8s-1-20-2-do-0-fra1-1617268555333
    
    # If you haven't already integrated with your registry and only want workloads in a particular namespace to be able to pull 
    # from your registry, uncomment the next two commands.
    #- name: Upload credentials of your registry to your DigitalOcean Kubernetes cluster
    #  run: doctl registry kubernetes-manifest | kubectl apply -f -
      
    #- name: Reference the secret you just uploaded as an imagePullSecrets
    #  run: "kubectl patch serviceaccount default -p '{\"imagePullSecrets\": [{\"name\": \"registry-sdas\"}]}'"

    - name: Deploy to DigitalOcean Kubernetes
      run: kubectl apply -f $GITHUB_WORKSPACE/config/deployment.yml

    - name: Verify deployment
      run: kubectl rollout status deployment/react-typescript-data-gen