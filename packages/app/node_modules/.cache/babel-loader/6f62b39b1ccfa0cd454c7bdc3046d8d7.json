{"ast":null,"code":"var _jsxFileName = \"/home/noname001/react-typescript-data-gen/packages/app/src/components/AddColumn.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Card, Form } from 'antd';\nimport { always, assoc, clone, converge, curry, includes, map, pick, pipe, prop, __ } from 'ramda';\nimport React, { useReducer } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addValueAndOnChange, getReactComponentFromCollect, onFinish, unionFields } from '../utils/form';\nimport { reducer } from '../utils/hook';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getComponentWithProps = curry((Component, props) => includes(props.component, ['Input', 'InputNumber', 'DatePicker', 'Select', 'TextArea']) ? /*#__PURE__*/_jsxDEV(Form.Item, { ...pick(['name', 'label', 'rules'], props),\n  children: /*#__PURE__*/_jsxDEV(Component, { ...pick(['value', 'defaultValue', 'onChange', 'options'], props)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 6\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 21,\n  columnNumber: 5\n}, this) : /*#__PURE__*/_jsxDEV(Component, { ...pick(['value', 'defaultValue', 'onChange'], props)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 37,\n  columnNumber: 5\n}, this));\nexport const Fields = ({\n  state,\n  dispatch\n}) => pipe(prop('fields'), map(converge(getComponentWithProps, [getReactComponentFromCollect, addValueAndOnChange(dispatch)])))(state);\n_c = Fields;\n\nconst FormFields = ([state, dispatch]) => {\n  _s();\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    bordered: true,\n    style: {\n      width: 400\n    },\n    title: \"Add Column\",\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      name: \"dynamic_form_nest_item\",\n      onFinish: onFinish(useDispatch(), state),\n      children: [/*#__PURE__*/_jsxDEV(Fields, {\n        state,\n        dispatch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        htmlType: \"submit\",\n        type: \"primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 3\n  }, this);\n};\n\n_s(FormFields, \"jI3HA1r1Cumjdbu14H7G+TUj798=\", false, function () {\n  return [useDispatch];\n});\n\n_c2 = FormFields;\nexport const AddColumn = () => pipe(converge(curry(useReducer), [always(reducer), clone, always(assoc('fields', __, {}))]), FormFields)(unionFields.slice(0, 1));\n_c3 = AddColumn;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Fields\");\n$RefreshReg$(_c2, \"FormFields\");\n$RefreshReg$(_c3, \"AddColumn\");","map":{"version":3,"sources":["/home/noname001/react-typescript-data-gen/packages/app/src/components/AddColumn.tsx"],"names":["Button","Card","Form","always","assoc","clone","converge","curry","includes","map","pick","pipe","prop","__","React","useReducer","useDispatch","addValueAndOnChange","getReactComponentFromCollect","onFinish","unionFields","reducer","getComponentWithProps","Component","props","component","Fields","state","dispatch","FormFields","width","AddColumn","slice"],"mappings":"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","sourcesContent":["import { Button, Card, Form } from 'antd'\nimport { always, assoc, clone, converge, curry, includes, map, pick, pipe, prop, __ } from 'ramda'\nimport React, { useReducer } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { AppDispatch, Field, FormField } from '../react-app-env'\nimport { addValueAndOnChange, getReactComponentFromCollect, onFinish, unionFields } from '../utils/form'\nimport { reducer } from '../utils/hook'\n\nconst getComponentWithProps = curry((\n  Component: any, props: Field\n): JSX.Element => includes(\n  props.component,\n  [\n    'Input',\n    'InputNumber',\n    'DatePicker',\n    'Select',\n    'TextArea'\n  ]\n)\n  ? <Form.Item {...pick(\n    [\n      'name',\n      'label',\n      'rules'\n    ],\n    props\n  )}><Component {...pick(\n      [\n        'value',\n        'defaultValue',\n        'onChange',\n        'options'\n      ],\n      props\n    )}/></Form.Item>\n  : <Component {...pick(\n    [\n      'value',\n      'defaultValue',\n      'onChange'\n    ],\n    props\n  )}/>)\n\nexport const Fields: React.FC<{state: FormField, dispatch: AppDispatch}> = ({state, dispatch}: {state: FormField, dispatch: AppDispatch}) => pipe<any, any, any>(\n  prop<any, any>('fields'),\n  map(converge(\n    getComponentWithProps,\n    [getReactComponentFromCollect, addValueAndOnChange(dispatch)]\n  ))\n)(state) \n\nconst FormFields = ([state, dispatch]: any): JSX.Element=>(\n  <Card\n    bordered\n    style={ { width: 400 } }\n    title=\"Add Column\"\n  >\n    <Form\n      autoComplete=\"off\"\n      name=\"dynamic_form_nest_item\"\n      onFinish={ onFinish(\n        useDispatch(),\n        state\n      ) }\n    >\n      <Fields {...{state, dispatch}} />\n      <Button\n        htmlType=\"submit\"\n        type=\"primary\"\n      >\n        Submit\n      </Button>\n    </Form>\n  </Card>\n)\nexport const AddColumn = (): JSX.Element => pipe<any, any, any>(\n  converge(\n    curry(useReducer),\n    [\n      always(reducer),\n      clone,\n      always(assoc(\n        'fields',\n        __,\n        {}\n      ))\n    ]\n  ),\n  FormFields\n)(unionFields\n  .slice(\n    0,\n    1\n  ))\n\n"]},"metadata":{},"sourceType":"module"}