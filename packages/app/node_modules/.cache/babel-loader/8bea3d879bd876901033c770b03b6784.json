{"ast":null,"code":"import { createSlice, current } from '@reduxjs/toolkit';\nimport { append, clone, cond, converge, ifElse, mergeRight, pipe, prop, propEq, reject, split, __ } from 'ramda';\nimport { dayOfWeekToDate } from '../../utils/dates';\nimport { random } from '../../utils/numbers';\nimport { addParam, cartesianCondition, findAndMerge, mergeAndRestruct } from '../../utils/popular';\nexport const initialState = {\n  columns: [{\n    name: 'city',\n    label: 'City',\n    type: 'custom',\n    collect: ['Moscow', 'London', 'Jerusalem']\n  }, {\n    name: 'product',\n    label: 'Product',\n    type: 'custom',\n    collect: ['Socks', 'T-Shirt', 'Coat', 'Jeans', 'Trousers', 'Sneakers']\n  }, {\n    name: 'Skill',\n    label: 'Job Skill',\n    type: 'custom',\n    collect: ['Baker', 'Health Educator', 'Budget Analyst', 'Design Engineer', 'Designer', 'Backend Developer']\n  }],\n  rows: [],\n  limiting: null\n};\nconst customType = addParam('collect', pipe(prop('collect'), split('\\n')), [clone]);\n\nconst wrapLogic = func => converge(mergeRight, [clone, pipe(prop('options'), func, mergeAndRestruct(['collect'], 'options'))]);\n\nconst bindTypeToHandler = cond([[propEq('type', 'dates'), wrapLogic(dayOfWeekToDate)], [propEq('type', 'integer'), wrapLogic(random)]]);\nexport const generatorSlice = createSlice({\n  name: 'generator',\n  initialState,\n  reducers: {\n    createColumn: (state, action) => {\n      state.columns = pipe(ifElse(propEq('type', 'custom'), customType, bindTypeToHandler), append(__, state.columns))(action.payload);\n    },\n    removeColumn: (state, action) => {\n      const name = action.payload.name;\n      state.columns = reject(propEq('name', name), state.columns);\n    },\n    setLimit: (state, action) => {\n      state.limiting = action.payload;\n    },\n    run: state => {\n      const {\n        columns,\n        limiting\n      } = current(state);\n      state.rows = cartesianCondition(columns, limiting);\n    },\n    changeColumn: (state, action) => {\n      state.columns = findAndMerge(state.columns, action.payload, 'name');\n    }\n  }\n});\nexport const {\n  createColumn,\n  removeColumn,\n  changeColumn,\n  run,\n  setLimit\n} = generatorSlice.actions; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount: number): AppThunk => dispatch => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount))\n//   }, 1000)\n// }\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.countevalue)`\n\nexport const selectColumns = state => state.generator.columns;\nexport const selectRows = state => state.generator.rows;\nexport const selectLimiting = state => state.generator.limiting;\nexport default generatorSlice.reducer;","map":{"version":3,"sources":["/home/noname001/react-typescript-data-gen/packages/app/src/features/generator/generatorSlice.ts"],"names":["createSlice","current","append","clone","cond","converge","ifElse","mergeRight","pipe","prop","propEq","reject","split","__","dayOfWeekToDate","random","addParam","cartesianCondition","findAndMerge","mergeAndRestruct","initialState","columns","name","label","type","collect","rows","limiting","customType","wrapLogic","func","bindTypeToHandler","generatorSlice","reducers","createColumn","state","action","payload","removeColumn","setLimit","run","changeColumn","actions","selectColumns","generator","selectRows","selectLimiting","reducer"],"mappings":"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","sourcesContent":["import { createSlice, current, PayloadAction } from '@reduxjs/toolkit'\nimport { append, clone, cond, converge, ifElse, mergeRight, pipe, prop, propEq, reject, split, __ } from 'ramda'\nimport { RootState } from '../../app/store'\nimport { ColumnType, GeneratorState, TypeLimiting } from '../../react-app-env.d'\nimport { dayOfWeekToDate } from '../../utils/dates'\nimport { random } from '../../utils/numbers'\nimport { addParam, cartesianCondition, findAndMerge, mergeAndRestruct } from '../../utils/popular'\n\nexport const initialState: GeneratorState = {\n  columns: [\n    {\n      name: 'city',\n      label: 'City',\n      type: 'custom',\n      collect: [\n        'Moscow',\n        'London',\n        'Jerusalem'\n      ]\n    },\n    {\n      name: 'product',\n      label: 'Product',\n      type: 'custom',\n      collect: [\n        'Socks',\n        'T-Shirt',\n        'Coat',\n        'Jeans',\n        'Trousers',\n        'Sneakers'\n      ]\n    },\n    {\n      name: 'Skill',\n      label: 'Job Skill',\n      type: 'custom',\n      collect: [\n        'Baker',\n        'Health Educator',\n        'Budget Analyst',\n        'Design Engineer',\n        'Designer',\n        'Backend Developer'\n      ]\n    }\n  ],\n  rows: [],\n  limiting: null\n}\nconst customType = addParam(\n  'collect',\n  pipe(\n    prop<any, any>('collect'),\n    split('\\n')\n  ),\n  [clone]\n)\n\nconst wrapLogic = (func: any)=> converge(\n  mergeRight,\n  [\n    clone, pipe(\n      prop('options'),\n      func,\n      mergeAndRestruct(\n        ['collect'],\n        'options'\n      )\n    )\n  ]\n)\nconst bindTypeToHandler = cond([\n  [\n    propEq(\n      'type',\n      'dates'\n    ), wrapLogic(dayOfWeekToDate)\n  ], [\n    propEq(\n      'type',\n      'integer'\n    ), wrapLogic(random)\n  ]\n])\nexport const generatorSlice = createSlice({\n  name: 'generator',\n  initialState,\n  reducers: {\n    createColumn: (\n      state, action: PayloadAction<ColumnType>\n    ) => {\n      state.columns = pipe<any, any, any>(\n        ifElse(\n          propEq(\n            'type',\n            'custom'\n          ),\n          customType,\n          bindTypeToHandler\n        ),\n        append(\n          __,\n          state.columns\n        )\n      )(action.payload)\n    },\n    removeColumn: (\n      state, action: PayloadAction<ColumnType>\n    ) => {\n      const name = action.payload.name\n      state.columns = reject(\n        propEq(\n          'name',\n          name\n        ),\n        state.columns\n      )\n    },\n    setLimit: (\n      state, action: PayloadAction<TypeLimiting>\n    ) => {\n      state.limiting = action.payload\n    },\n    run: state => {\n      const { columns, limiting } = current(state)\n      state.rows = cartesianCondition(\n        columns,\n        limiting\n      )\n    },\n    changeColumn: (\n      state: any, action: PayloadAction<ColumnType>\n    ) => {\n      state.columns = findAndMerge(\n        state.columns,\n        action.payload,\n        'name'\n      )\n    }\n  }\n})\n\nexport const { createColumn, removeColumn, changeColumn, run, setLimit } = generatorSlice.actions\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount: number): AppThunk => dispatch => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount))\n//   }, 1000)\n// }\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.countevalue)`\nexport const selectColumns = (state: RootState) => state.generator.columns\nexport const selectRows = (state: RootState) => state.generator.rows\nexport const selectLimiting = (state: RootState) => state.generator.limiting\n\nexport default generatorSlice.reducer\n"]},"metadata":{},"sourceType":"module"}