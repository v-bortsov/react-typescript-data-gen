{"ast":null,"code":"var toString = require('ramda/src/toString');\n\nvar equals = require('ramda/src/equals');\n\nfunction Tuple(x, y) {\n  switch (arguments.length) {\n    case 0:\n      throw new TypeError('no arguments to Tuple');\n\n    case 1:\n      return function (y) {\n        return new _Tuple(x, y);\n      };\n\n    default:\n      return new _Tuple(x, y);\n  }\n}\n\nfunction _Tuple(x, y) {\n  this[0] = x;\n  this[1] = y;\n  this.length = 2;\n}\n\nfunction ensureConcat(xs) {\n  xs.forEach(function (x) {\n    if (typeof x.concat != 'function') {\n      throw new TypeError(toString(x) + ' must be a semigroup to perform this operation');\n    }\n  });\n}\n\nTuple.fst = function (x) {\n  return x[0];\n};\n\nTuple.snd = function (x) {\n  return x[1];\n};\n\n_Tuple.prototype['@@type'] = 'ramda-fantasy/Tuple'; // semigroup\n\n_Tuple.prototype.concat = function (x) {\n  ensureConcat([this[0], this[1]]);\n  return Tuple(this[0].concat(x[0]), this[1].concat(x[1]));\n}; // functor\n\n\n_Tuple.prototype.map = function (f) {\n  return Tuple(this[0], f(this[1]));\n}; // apply\n\n\n_Tuple.prototype.ap = function (m) {\n  ensureConcat([this[0]]);\n  return Tuple(this[0].concat(m[0]), this[1](m[1]));\n}; // setoid\n\n\n_Tuple.prototype.equals = function (that) {\n  return that instanceof _Tuple && equals(this[0], that[0]) && equals(this[1], that[1]);\n};\n\n_Tuple.prototype.toString = function () {\n  return 'Tuple(' + toString(this[0]) + ', ' + toString(this[1]) + ')';\n};\n\nmodule.exports = Tuple;","map":{"version":3,"sources":["/home/noname001/react-typescript-data-gen/node_modules/ramda-fantasy/src/Tuple.js"],"names":["toString","require","equals","Tuple","x","y","arguments","length","TypeError","_Tuple","ensureConcat","xs","forEach","concat","fst","snd","prototype","map","f","ap","m","that","module","exports"],"mappings":"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","sourcesContent":["var toString = require('ramda/src/toString');\nvar equals = require('ramda/src/equals');\n\n\nfunction Tuple(x, y) {\n  switch (arguments.length) {\n    case 0:\n      throw new TypeError('no arguments to Tuple');\n    case 1:\n      return function(y) {\n        return new _Tuple(x, y);\n      };\n    default:\n      return new _Tuple(x, y);\n  }\n}\n\nfunction _Tuple(x, y) {\n  this[0] = x;\n  this[1] = y;\n  this.length = 2;\n}\n\nfunction ensureConcat(xs) {\n  xs.forEach(function(x) {\n    if (typeof x.concat != 'function') {\n      throw new TypeError(toString(x) + ' must be a semigroup to perform this operation');\n    }\n  });\n}\n\nTuple.fst = function(x) {\n  return x[0];\n};\n\nTuple.snd = function(x) {\n  return x[1];\n};\n\n_Tuple.prototype['@@type'] = 'ramda-fantasy/Tuple';\n\n// semigroup\n_Tuple.prototype.concat = function(x) {\n  ensureConcat([this[0], this[1]]);\n  return Tuple(this[0].concat(x[0]), this[1].concat(x[1]));\n};\n\n// functor\n_Tuple.prototype.map = function(f) {\n  return Tuple(this[0], f(this[1]));\n};\n\n// apply\n_Tuple.prototype.ap = function(m) {\n  ensureConcat([this[0]]);\n  return Tuple(this[0].concat(m[0]), this[1](m[1]));\n};\n\n// setoid\n_Tuple.prototype.equals = function(that) {\n  return that instanceof _Tuple && equals(this[0], that[0]) && equals(this[1], that[1]);\n};\n\n_Tuple.prototype.toString = function() {\n  return 'Tuple(' + toString(this[0]) + ', ' + toString(this[1]) + ')';\n};\n\nmodule.exports = Tuple;\n"]},"metadata":{},"sourceType":"script"}