{"ast":null,"code":"/// <reference types=\"react-scripts\" />\n//  function lenFunc(s: string): number;\nexport let DaysOfWeek;\n\n(function (DaysOfWeek) {\n  DaysOfWeek[DaysOfWeek[\"Sun\"] = 0] = \"Sun\";\n  DaysOfWeek[DaysOfWeek[\"Mon\"] = 1] = \"Mon\";\n  DaysOfWeek[DaysOfWeek[\"Tue\"] = 2] = \"Tue\";\n  DaysOfWeek[DaysOfWeek[\"Wed\"] = 3] = \"Wed\";\n  DaysOfWeek[DaysOfWeek[\"Thu\"] = 4] = \"Thu\";\n  DaysOfWeek[DaysOfWeek[\"Fri\"] = 5] = \"Fri\";\n  DaysOfWeek[DaysOfWeek[\"Sat\"] = 6] = \"Sat\";\n})(DaysOfWeek || (DaysOfWeek = {}));\n\nexport let Interval;\n\n(function (Interval) {\n  Interval[\"days\"] = \"days\";\n  Interval[\"weeks\"] = \"weeks\";\n  Interval[\"hours\"] = \"hours\";\n})(Interval || (Interval = {}));","map":{"version":3,"sources":["/home/noname001/react-typescript-data-gen/packages/app/src/react-app-env.d.ts"],"names":["DaysOfWeek","Interval"],"mappings":"AAAA;AAsCA;AAMA,WAAYA,UAAZ;;WAAYA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;GAAAA,U,KAAAA,U;;AASZ,WAAYC,QAAZ;;WAAYA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;GAAAA,Q,KAAAA,Q","sourcesContent":["/// <reference types=\"react-scripts\" />\ninterface GeneratorState {\n  columns: ColumnType[]\n  rows: any[]\n  limiting: TypeLimiting\n}\ntype ColumnType<T> = {\n  name: string\n  label: string\n  type: string\n  collect: string[]\n  options: T\n} \ntype Option = {\n  from?: Date | number\n  to?: Date | number\n  random: boolean\n}\ntype OptionDate = Option & {\n  days?: number[]\n  startDate?: any\n  endDate?: any\n}\ntype OptionNumber = Option & {\n  step: number\n  ceil: boolean\n}\ntype OptionString = {\n  length: number\n}\n\ninterface ObjectLiteral {\n  [key: string]: any\n}\n\nfunction rangeNumber(range: Range<number>): number[]\n\ndeclare function nestedFunc(arr: number): string[];\n//  function lenFunc(s: string): number;\nfunction lenFunc(num: number): nestedFunc;\n\ntype AppDispatch = ThunkDispatch<RootState, any, AnyAction>; \ntype TypeLimiting = (null | number | ColumnType.name)\ntype Nullable<T> = T | null;\nexport enum DaysOfWeek {\n  Sun = 0,\n  Mon = 1,\n  Tue = 2,\n  Wed = 3,\n  Thu = 4,\n  Fri = 5,\n  Sat = 6\n}\nexport enum Interval {\n  days = 'days',\n  weeks = 'weeks',\n  hours = 'hours'\n}\n\ninterface IDateOption {\n  days: number[]\n  lengthDays: number\n  dates: string[]\n  limit: number\n  mode: 'week'|'range'\n  startDate: any\n  endDate: string\n}\n\ntype Field = {\n  name: string\n  label: string\n  component: string\n  value: any\n  defaultValue: any\n  rules: any[]\n  onChange?: any\n}\n\ntype FormField = {\n  fields: Field[]\n}\n\ntype Day = {\n  label: string\n  abbr: string\n  active: boolean\n}"]},"metadata":{},"sourceType":"module"}