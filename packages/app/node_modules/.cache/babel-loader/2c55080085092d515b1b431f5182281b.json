{"ast":null,"code":"import moment from 'moment';\nimport { always, aperture, assoc, chain, clone, concat, converge, curry, divide, filter, flatten, ifElse, is, last, length, map, of, pair, pipe, prop, reduce, repeat, when, __ } from 'ramda';\nimport { DaysOfWeek } from '../react-app-env.d';\nimport { addParam, enumToObject } from './popular'; // const opt = { days: [1, 2, 3], lengthDays: 7, limit: 10, mode: 'week|range', startDate: '', endDate: '' }\n\nconst interval = 7;\nconst countDays = pipe(prop('days'), length);\nconst ceilLimit = pipe(converge(divide, [prop('limit'), countDays]), Math.ceil);\nconst dayAtNumber = enumToObject(DaysOfWeek);\nexport const filterAndPropDayNumber = pipe(filter(prop('active')), map(pipe(prop('abbr'), prop(__, dayAtNumber))));\nexport const addDaysToDate = curry((currentDate, count, flag) => moment(currentDate, 'DD.MM.YYYY').add(count, flag).format('DD.MM.YYYY'));\nexport const dayToDate = pipe(pair, converge(concat, [pipe(prop(0), when(is(String), of)), pipe(converge(addDaysToDate(__, __, 'days'), [pipe(prop(0), ifElse(is(String), clone, last)), prop(1)]), of)]));\nexport const transformDates = pipe(chain(assoc('collect'), pipe(converge(repeat, [prop('days'), ceilLimit]), flatten, aperture(2), reduce((acc, curr) => {\n  acc.push(curr[1] < curr[0] ? interval - curr[0] + curr[1] : curr[1] - curr[0]);\n  return acc;\n}, []))), chain(assoc('dates'), converge(reduce, [always(dayToDate), prop('startDay'), prop('collect')])), prop('dates')); // (opt)\n\nexport const dayOfWeekToDate = pipe(addParam('days', filterAndPropDayNumber, [prop('days')]), addParam('collect', transformDates, [clone]));","map":{"version":3,"sources":["/home/noname001/react-typescript-data-gen/packages/app/src/utils/dates.ts"],"names":["moment","always","aperture","assoc","chain","clone","concat","converge","curry","divide","filter","flatten","ifElse","is","last","length","map","of","pair","pipe","prop","reduce","repeat","when","__","DaysOfWeek","addParam","enumToObject","interval","countDays","ceilLimit","Math","ceil","dayAtNumber","filterAndPropDayNumber","addDaysToDate","currentDate","count","flag","add","format","dayToDate","String","transformDates","acc","curr","push","dayOfWeekToDate"],"mappings":"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","sourcesContent":["import moment from 'moment'\nimport { always, aperture, assoc, chain, clone, concat, converge, curry, divide, filter, flatten, ifElse, is, last, length, map, of, pair, pipe, prop, reduce, repeat, tap, when, __ } from 'ramda'\nimport { DaysOfWeek, Interval } from '../react-app-env.d'\nimport { addParam, enumToObject } from './popular'\n\n// const opt = { days: [1, 2, 3], lengthDays: 7, limit: 10, mode: 'week|range', startDate: '', endDate: '' }\nconst interval = 7\n\nconst countDays = pipe<any, number[], number>(\n  prop('days'),\n  length\n)\nconst ceilLimit = pipe(\n  converge(\n    divide,\n    [prop('limit'), countDays]\n  ),\n  Math.ceil\n)\nconst dayAtNumber = enumToObject(DaysOfWeek)\nexport const filterAndPropDayNumber = pipe<any, any, any>(\n  filter<any>(prop('active')),\n  map<any, any[]>(pipe<any, any, any>(\n    prop('abbr'),\n    prop(\n      __,\n      dayAtNumber\n    )\n  ))\n)\nexport const addDaysToDate: any = curry((\n  currentDate: string,\n  count: number, \n  flag: Interval\n) => moment(\n  currentDate,\n  'DD.MM.YYYY'\n)\n  .add(\n    count,\n    flag\n  )\n  .format('DD.MM.YYYY'))\nexport const dayToDate = pipe<string[], any, any, any>(\n  pair,\n  converge(\n    concat,\n    [\n      pipe(\n        prop<any>(0),\n        when(\n          is(String),\n          of\n        )\n      ), pipe(\n        converge(\n          addDaysToDate(\n            __,\n            __,\n            'days'\n          ),\n          [\n            pipe(\n              prop<any>(0),\n              ifElse(\n                is(String),\n                clone,\n                last\n              )\n            ), prop<any>(1)\n          ]\n        ),\n        of\n      )\n    ]\n  )\n)\nexport const transformDates = pipe<any, any, any, any, any>(\n  chain(\n    assoc('collect'),\n    pipe(\n      converge(\n        repeat,\n        [prop('days'), ceilLimit]\n      ),\n      flatten,\n      aperture(2),\n      reduce(\n        (\n          acc: number[], curr: number[]\n        ) => {\n          acc.push(curr[1] < curr[0] ? ((interval - curr[0]) + curr[1]) : (curr[1] - curr[0]))\n          return acc\n        },\n        []\n      )\n    )\n  ),\n  chain(\n    assoc('dates'),\n    converge(\n      reduce,\n      [\n        always(dayToDate),\n        prop('startDay'),\n        prop('collect')\n      ]\n    )\n  ),\n  prop('dates')\n)// (opt)\nexport const dayOfWeekToDate = pipe<any, any, any>(\n  addParam(\n    'days',\n    filterAndPropDayNumber,\n    [prop('days')]\n  ),\n  addParam(\n    'collect',\n    transformDates,\n    [clone]\n  )\n)\n"]},"metadata":{},"sourceType":"module"}