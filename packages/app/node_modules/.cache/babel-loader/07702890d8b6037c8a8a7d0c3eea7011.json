{"ast":null,"code":"var _jsxFileName = \"/home/noname001/react-typescript-data-gen/packages/app/src/components/RadioGroup.tsx\",\n    _s = $RefreshSig$();\n\nimport { Card, InputNumber, Radio, Select } from 'antd';\nimport { always, cond, equals, is, isNil } from 'ramda';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectColumns, selectLimiting, setLimit } from '../features/generator/generatorSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import { ColumnType } from '../global'\nconst {\n  Option\n} = Select;\nconst options = [{\n  label: 'All',\n  value: 'all'\n}, {\n  label: 'First',\n  value: 'limit'\n}, {\n  label: 'By Column',\n  value: 'column'\n}];\nexport const spotGroupType = cond([[is(Number), always('limit')], [is(String), always('column')], [isNil, always('all')]]);\nexport function RadioGroup() {\n  _s();\n\n  const limit = useSelector(selectLimiting);\n  const columns = useSelector(selectColumns);\n  const dispatch = useDispatch();\n  const [group, setGroup] = useState(spotGroupType(limit));\n  return /*#__PURE__*/_jsxDEV(Card, {\n    bordered: true,\n    style: {\n      width: 400\n    },\n    title: \"Limiting\",\n    children: [/*#__PURE__*/_jsxDEV(Radio.Group, {\n      onChange: e => {\n        if (e.target.value === 'all') {\n          dispatch(setLimit(null));\n        }\n\n        setGroup(e.target.value);\n      },\n      options: options,\n      value: group\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), equals('limit', group) && /*#__PURE__*/_jsxDEV(InputNumber, {\n      defaultValue: 3,\n      max: 10,\n      min: 1,\n      onChange: value => dispatch(setLimit(value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), equals('column', group) && /*#__PURE__*/_jsxDEV(Select, {\n      defaultValue: \"All\",\n      onChange: value => dispatch(setLimit(value)),\n      style: {\n        width: 120\n      },\n      children: columns.map((column, idx) => /*#__PURE__*/_jsxDEV(Option, {\n        value: column.name,\n        children: column.label\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 16\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RadioGroup, \"xuw1yjns+Q/F2lvCNTPQi1Am+jA=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = RadioGroup;\n\nvar _c;\n\n$RefreshReg$(_c, \"RadioGroup\");","map":{"version":3,"sources":["/home/noname001/react-typescript-data-gen/packages/app/src/components/RadioGroup.tsx"],"names":["Card","InputNumber","Radio","Select","always","cond","equals","is","isNil","React","useState","useDispatch","useSelector","selectColumns","selectLimiting","setLimit","Option","options","label","value","spotGroupType","Number","String","RadioGroup","limit","columns","dispatch","group","setGroup","width","e","target","map","column","idx","name"],"mappings":"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","sourcesContent":["import { Card, InputNumber, Radio, Select } from 'antd'\nimport { always, cond, equals, is, isNil } from 'ramda'\nimport React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectColumns, selectLimiting, setLimit } from '../features/generator/generatorSlice'\nimport { ColumnType } from '../react-app-env'\n// import { ColumnType } from '../global'\n\nconst { Option } = Select\n\nconst options = [\n  { label: 'All', value: 'all' },\n  { label: 'First', value: 'limit' },\n  { label: 'By Column', value: 'column' }\n]\nexport const spotGroupType = cond([\n  [is(Number), always('limit')],\n  [is(String), always('column')],\n  [isNil, always('all')]\n])\nexport function RadioGroup (): JSX.Element {\n  const limit = useSelector(selectLimiting)\n  const columns = useSelector(selectColumns)\n  const dispatch = useDispatch()\n  \n  const [group, setGroup] = useState(spotGroupType(limit))\n  \n  return (\n    <Card\n      bordered\n      style={ { width: 400 } }\n      title=\"Limiting\"\n    >\n      <Radio.Group\n        onChange={ e => {\n          if (e.target.value === 'all') {\n            dispatch(setLimit(null)) \n          } setGroup(e.target.value) \n        } }\n        options={ options }\n        value={ group }\n      />\n      {equals(\n        'limit',\n        group\n      ) && \n        <InputNumber\n          defaultValue={ 3 }\n          max={ 10 }\n          min={ 1 }\n          onChange={ value => dispatch(setLimit(value)) }\n        />\n      }\n      {equals(\n        'column',\n        group\n      ) && \n        <Select\n          defaultValue=\"All\"\n          onChange={ value => dispatch(setLimit(value)) }\n          style={ { width: 120 } }\n        >\n          {columns.map((\n            column: ColumnType, idx: number\n          ) => <Option\n            key={ idx }\n            value={ column.name }\n          >\n            {column.label}\n          </Option>)}\n        </Select>\n      }\n    </Card>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}