[{"/home/noname001/react-typescript-data-gen/packages/app/src/index.tsx":"1","/home/noname001/react-typescript-data-gen/packages/app/src/serviceWorker.ts":"2","/home/noname001/react-typescript-data-gen/packages/app/src/app/store.ts":"3","/home/noname001/react-typescript-data-gen/packages/app/src/App.tsx":"4","/home/noname001/react-typescript-data-gen/packages/app/src/features/counter/counterSlice.ts":"5","/home/noname001/react-typescript-data-gen/packages/app/src/features/generator/generatorSlice.ts":"6","/home/noname001/react-typescript-data-gen/packages/app/src/features/generator/Table.tsx":"7","/home/noname001/react-typescript-data-gen/packages/app/src/components/AddColumn.tsx":"8","/home/noname001/react-typescript-data-gen/packages/app/src/components/RadioGroup.tsx":"9","/home/noname001/react-typescript-data-gen/packages/app/src/utils/dates.ts":"10","/home/noname001/react-typescript-data-gen/packages/app/src/utils/numbers.ts":"11","/home/noname001/react-typescript-data-gen/packages/app/src/utils/popular.ts":"12","/home/noname001/react-typescript-data-gen/packages/app/src/utils/hook.ts":"13","/home/noname001/react-typescript-data-gen/packages/app/src/utils/form.ts":"14","/home/noname001/react-typescript-data-gen/packages/app/src/features/generator/ColumnFilters.tsx":"15","/home/noname001/react-typescript-data-gen/packages/app/src/react-app-env.d.ts":"16","/home/noname001/react-typescript-data-gen/packages/app/src/components/WeekDays.tsx":"17"},{"size":620,"mtime":1618731981326,"results":"18","hashOfConfig":"19"},{"size":5388,"mtime":1618731982296,"results":"20","hashOfConfig":"19"},{"size":623,"mtime":1618731979696,"results":"21","hashOfConfig":"19"},{"size":1210,"mtime":1618731980946,"results":"22","hashOfConfig":"19"},{"size":1812,"mtime":1618731979956,"results":"23","hashOfConfig":"19"},{"size":3995,"mtime":1618731979966,"results":"24","hashOfConfig":"19"},{"size":612,"mtime":1618731979966,"results":"25","hashOfConfig":"19"},{"size":2046,"mtime":1618731979826,"results":"26","hashOfConfig":"19"},{"size":1935,"mtime":1618731979826,"results":"27","hashOfConfig":"19"},{"size":2466,"mtime":1618731980376,"results":"28","hashOfConfig":"19"},{"size":202,"mtime":1618731980376,"results":"29","hashOfConfig":"19"},{"size":3258,"mtime":1618736462566,"results":"30","hashOfConfig":"19"},{"size":1351,"mtime":1618731980376,"results":"31","hashOfConfig":"19"},{"size":3950,"mtime":1618731980376,"results":"32","hashOfConfig":"19"},{"size":2592,"mtime":1618731979966,"results":"33","hashOfConfig":"19"},{"size":1469,"mtime":1618731982096,"results":"34","hashOfConfig":"19"},{"size":887,"mtime":1618731979826,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ox74gg",{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},"/home/noname001/react-typescript-data-gen/packages/app/src/index.tsx",[],"/home/noname001/react-typescript-data-gen/packages/app/src/serviceWorker.ts",["78","79"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/.exec(window.location.hostname))\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n};\n\nfunction registerValidSW (\n  swUrl: string, config?: Config\n) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.')\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\n        'Error during service worker registration:',\n        error\n      )\n    })\n}\n\nfunction checkValidServiceWorker (\n  swUrl: string, config?: Config\n) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(\n    swUrl,\n    {\n      headers: { 'Service-Worker': 'script' }\n    }\n  )\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister()\n            .then(() => {\n              window.location.reload()\n            })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(\n          swUrl,\n          config\n        )\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\n      'load',\n      () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n        if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(\n            swUrl,\n            config\n          )\n\n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log('This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA')\n          })\n        } else {\n        // Is not localhost. Just register service worker\n          registerValidSW(\n            swUrl,\n            config\n          )\n        }\n      }\n    )\n  }\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","/home/noname001/react-typescript-data-gen/packages/app/src/app/store.ts",[],"/home/noname001/react-typescript-data-gen/packages/app/src/App.tsx",[],"/home/noname001/react-typescript-data-gen/packages/app/src/features/counter/counterSlice.ts",["80"],"import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AppThunk, RootState } from '../../app/store'\n\ninterface CounterState {\n  value: number\n}\n\nconst initialState: CounterState = {\n  value: 0\n}\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: state => {\n      state.value -= 1\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (\n      state, action: PayloadAction<number>\n    ) => {\n      state.value += action.payload\n    }\n  }\n})\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\n  setTimeout(\n    () => {\n      dispatch(incrementByAmount(amount))\n    },\n    1000\n  )\n}\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value\n\nexport default counterSlice.reducer\n","/home/noname001/react-typescript-data-gen/packages/app/src/features/generator/generatorSlice.ts",["81","82","83"],"import { createSlice, current, PayloadAction } from '@reduxjs/toolkit'\nimport { append, clone, cond, converge, ifElse, mergeRight, pipe, prop, propEq, reject, split, __ } from 'ramda'\nimport { RootState } from '../../app/store'\nimport { ColumnType, GeneratorState, TypeLimiting } from '../../react-app-env.d'\nimport { dayOfWeekToDate } from '../../utils/dates'\nimport { random } from '../../utils/numbers'\nimport { addParam, cartesianCondition, findAndMerge, mergeAndRestruct } from '../../utils/popular'\n\nexport const initialState: GeneratorState = {\n  columns: [\n    {\n      name: 'city',\n      label: 'City',\n      type: 'custom',\n      collect: [\n        'Moscow',\n        'London',\n        'Jerusalem'\n      ]\n    },\n    {\n      name: 'product',\n      label: 'Product',\n      type: 'custom',\n      collect: [\n        'Socks',\n        'T-Shirt',\n        'Coat',\n        'Jeans',\n        'Trousers',\n        'Sneakers'\n      ]\n    },\n    {\n      name: 'Skill',\n      label: 'Job Skill',\n      type: 'custom',\n      collect: [\n        'Baker',\n        'Health Educator',\n        'Budget Analyst',\n        'Design Engineer',\n        'Designer',\n        'Backend Developer'\n      ]\n    }\n  ],\n  rows: [],\n  limiting: null\n}\nconst customType = addParam(\n  'collect',\n  pipe(\n    prop<any, any>('collect'),\n    split('\\n')\n  ),\n  [clone]\n)\n\nconst wrapLogic = (func: any)=> converge(\n  mergeRight,\n  [\n    clone, pipe(\n      prop('options'),\n      func,\n      mergeAndRestruct(\n        ['collect'],\n        'options'\n      )\n    )\n  ]\n)\nconst bindTypeToHandler = cond([\n  [\n    propEq(\n      'type',\n      'dates'\n    ), wrapLogic(dayOfWeekToDate)\n  ], [\n    propEq(\n      'type',\n      'integer'\n    ), wrapLogic(random)\n  ]\n])\nexport const generatorSlice = createSlice({\n  name: 'generator',\n  initialState,\n  reducers: {\n    createColumn: (\n      state, action: PayloadAction<ColumnType>\n    ) => {\n      state.columns = pipe<any, any, any>(\n        ifElse(\n          propEq(\n            'type',\n            'custom'\n          ),\n          customType,\n          bindTypeToHandler\n        ),\n        append(\n          __,\n          state.columns\n        )\n      )(action.payload)\n    },\n    removeColumn: (\n      state, action: PayloadAction<ColumnType>\n    ) => {\n      const name = action.payload.name\n      state.columns = reject(\n        propEq(\n          'name',\n          name\n        ),\n        state.columns\n      )\n    },\n    setLimit: (\n      state, action: PayloadAction<TypeLimiting>\n    ) => {\n      state.limiting = action.payload\n    },\n    run: state => {\n      const { columns, limiting } = current(state)\n      state.rows = cartesianCondition(\n        columns,\n        limiting\n      )\n    },\n    changeColumn: (\n      state: any, action: PayloadAction<ColumnType>\n    ) => {\n      state.columns = findAndMerge(\n        state.columns,\n        action.payload,\n        'name'\n      )\n    }\n  }\n})\n\nexport const { createColumn, removeColumn, changeColumn, run, setLimit } = generatorSlice.actions\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount: number): AppThunk => dispatch => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount))\n//   }, 1000)\n// }\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.countevalue)`\nexport const selectColumns = (state: RootState) => state.generator.columns\nexport const selectRows = (state: RootState) => state.generator.rows\nexport const selectLimiting = (state: RootState) => state.generator.limiting\n\nexport default generatorSlice.reducer\n","/home/noname001/react-typescript-data-gen/packages/app/src/features/generator/Table.tsx",[],"/home/noname001/react-typescript-data-gen/packages/app/src/components/AddColumn.tsx",[],"/home/noname001/react-typescript-data-gen/packages/app/src/components/RadioGroup.tsx",[],"/home/noname001/react-typescript-data-gen/packages/app/src/utils/dates.ts",["84","85"],"import moment from 'moment'\nimport { always, aperture, assoc, chain, clone, concat, converge, curry, divide, filter, flatten, ifElse, is, last, length, map, of, pair, pipe, prop, reduce, repeat, tap, when, __ } from 'ramda'\nimport { DaysOfWeek, Interval } from '../react-app-env.d'\nimport { addParam, enumToObject } from './popular'\n\n// const opt = { days: [1, 2, 3], lengthDays: 7, limit: 10, mode: 'week|range', startDate: '', endDate: '' }\nconst interval = 7\n\nconst countDays = pipe<any, number[], number>(\n  prop('days'),\n  length\n)\nconst ceilLimit = pipe(\n  converge(\n    divide,\n    [prop('limit'), countDays]\n  ),\n  Math.ceil\n)\nconst dayAtNumber = enumToObject(DaysOfWeek)\nexport const filterAndPropDayNumber = pipe<any, any, any>(\n  filter<any>(prop('active')),\n  map<any, any[]>(pipe<any, any, any>(\n    prop('abbr'),\n    prop(\n      __,\n      dayAtNumber\n    )\n  ))\n)\nexport const addDaysToDate: any = curry((\n  currentDate: string,\n  count: number, \n  flag: Interval\n) => moment(\n  currentDate,\n  'DD.MM.YYYY'\n)\n  .add(\n    count,\n    flag\n  )\n  .format('DD.MM.YYYY'))\nexport const dayToDate = pipe<string[], any, any, any>(\n  pair,\n  converge(\n    concat,\n    [\n      pipe(\n        prop<any>(0),\n        when(\n          is(String),\n          of\n        )\n      ), pipe(\n        converge(\n          addDaysToDate(\n            __,\n            __,\n            'days'\n          ),\n          [\n            pipe(\n              prop<any>(0),\n              ifElse(\n                is(String),\n                clone,\n                last\n              )\n            ), prop<any>(1)\n          ]\n        ),\n        of\n      )\n    ]\n  )\n)\nexport const transformDates = pipe<any, any, any, any, any>(\n  chain(\n    assoc('collect'),\n    pipe(\n      converge(\n        repeat,\n        [prop('days'), ceilLimit]\n      ),\n      flatten,\n      aperture(2),\n      reduce(\n        (\n          acc: number[], curr: number[]\n        ) => {\n          acc.push(curr[1] < curr[0] ? ((interval - curr[0]) + curr[1]) : (curr[1] - curr[0]))\n          return acc\n        },\n        []\n      )\n    )\n  ),\n  chain(\n    assoc('dates'),\n    converge(\n      reduce,\n      [\n        always(dayToDate),\n        prop('startDay'),\n        prop('collect')\n      ]\n    )\n  ),\n  prop('dates')\n)// (opt)\nexport const dayOfWeekToDate = pipe<any, any, any>(\n  addParam(\n    'days',\n    filterAndPropDayNumber,\n    [prop('days')]\n  ),\n  addParam(\n    'collect',\n    transformDates,\n    [clone]\n  )\n)\n","/home/noname001/react-typescript-data-gen/packages/app/src/utils/numbers.ts",[],"/home/noname001/react-typescript-data-gen/packages/app/src/utils/popular.ts",["86","87","88","89","90","91"],"import { always, append, assoc, chain, clone, converge, curry, filter, flatten, is, keys, length, map, mergeRight, objOf, of, omit, path, pick, pipe, pluck, prop, propEq, reduce, reject, slice, splitAt, transpose, values, when, xprod, zipObj, __ } from 'ramda';\nimport { ColumnType, ObjectLiteral, Option, OptionDate, OptionNumber, TypeLimiting } from '../react-app-env';\n// import {Maybe} from 'ramda-fantasy'\nconst RF = require('ramda-fantasy'),\n  Maybe = RF.Maybe,\n  Just    = Maybe.Just,\n  Nothing = Maybe.Nothing;\n// const seq = sequence(Maybe.of, [Maybe.Just(1), Maybe.Just(2), Maybe.Just(3)])\n// const lenFuncTest = lenFunc(\"string\")\n// lenFunc(\"asdfasf\")\n// export const multipledParts: any = (parts: any[][]) => parts.reduce(<any>xprod)\n//   .map(<any>flatten)\nimport {multipledParts} from 'ramda-combo'\nexport const sliceAndTranspose = curry((\n  columns: ColumnType<OptionNumber | OptionDate | Option>[], multipled: any[], equalsName: any\n) => pipe(\n  filter<any, any>(equalsName),\n  path([0, 'collect']),\n  converge(\n    append,\n    [\n      clone, pipe(\n        converge(\n          slice(0),\n          [length, always(multipled)]\n        ),\n        of\n      )\n    ]\n  ),\n  transpose\n)(columns))\n/**\n *   CartesianProduct Non using Ramda\n  const result = parts.reduce((\n    a, b\n  ) => a.reduce(\n    (\n      r, v\n    ) => r.concat(b.map(w => [].concat(\n      v, w\n    ))), []\n  ))\n */\n// TODO: REDUCE ~> one cycle\nexport const propFilterAndPluck = (\n  propNameEq: string, propValue: string, propPluck: string\n): any => pipe<any, any, any>(\n  reject(propEq(\n    propNameEq,\n    propValue\n  )),\n  pluck(propPluck)\n)\nexport const cartesianCondition: any = (\n  columns: ColumnType<OptionNumber | OptionDate | Option>[], limiting: TypeLimiting\n) => pipe<any, any, any, any, any>(\n  propFilterAndPluck(\n    'name',\n    limiting,\n    'collect'\n  ),\n  multipledParts,\n  when(\n    always(is(\n      String,\n      limiting\n    )),\n    sliceAndTranspose(\n      columns,\n      __,\n      propEq(\n        'name',\n        limiting\n      )\n    )\n  ),\n  map(pipe<any, any, any>(\n    flatten,\n    converge(\n      zipObj,\n      [\n        always(pluck(\n          'name',\n          columns\n        )), clone\n      ]\n    )\n  ))\n)(columns)\nexport const enumToObject: any = pipe<any, any, any, any>(\n  values,\n  converge(\n    splitAt,\n    [\n      pipe<any, any, any>(\n        filter(is(Number)),\n        length\n      ), clone\n    ]\n  ),\n  converge(\n    zipObj,\n    [prop<any>(0), prop<any>(1)]\n  )\n)\nexport const renameKeys: any = curry((\n  keysMap: ObjectLiteral, obj: ObjectLiteral\n) => reduce(\n  (\n    acc, key\n  ) => assoc(\n    keysMap[key] || key,\n    obj[key],\n    acc\n  ),\n  {},\n  keys(obj)\n))\nexport const findAndMerge = curry((\n  els: any[], element: ObjectLiteral, propName: string\n): any => map(<any>when(\n  propEq(\n    propName,\n    prop(\n      propName,\n      element\n    )\n  ),\n  mergeRight<any, any>(\n    __,\n    element\n  )\n))(els))\n\nexport const addParam = curry((\n  name: string, func: any, args: any[]\n) => chain(\n  assoc(name),\n  converge(\n    func,\n    args\n  )\n))\nexport const mergeAndRestruct = curry((\n  columns: string[], wrapper: string\n)=>converge(\n  mergeRight,\n  [\n    pick(columns), pipe(\n      omit(columns),\n      objOf(wrapper)\n    )\n  ]\n))","/home/noname001/react-typescript-data-gen/packages/app/src/utils/hook.ts",[],"/home/noname001/react-typescript-data-gen/packages/app/src/utils/form.ts",["92","93"],"import { DatePicker, Input, InputNumber, Select } from 'antd'\nimport { always, assoc, chain, compose, cond, converge, curry, equals, includes, indexBy, mergeRight, objOf, path, pick, pipe, pluck, prop, T, __ } from 'ramda'\nimport { WeekDays } from '../components/WeekDays'\nimport { createColumn } from '../features/generator/generatorSlice'\nimport { AppDispatch, Field } from '../react-app-env'\nimport { mergeAndRestruct } from './popular'\nconst daysOfWeek = [\n  { label: 'Sunday', abbr: 'Sun', active: false },\n  { label: 'Monday', abbr: 'Mon', active: true },\n  { label: 'Tuesday', abbr: 'Tue', active: false },\n  { label: 'Wednesday', abbr: 'Wed', active: false },\n  { label: 'Thursday', abbr: 'Thu', active: false },\n  { label: 'Friday', abbr: 'Fri', active: false },\n  { label: 'Saturday', abbr: 'Sat', active: false }\n]\nconst areas = [\n  { label: 'Custom', value: 'custom' },\n  { label: 'Integer', value: 'integer' },\n  { label: 'Dates', value: 'dates' }\n]\nconst { TextArea } = Input\nconst baseColumn = [\n  'name',\n  'label',\n  'type',\n  'collect'\n]\nexport const unionFields = [\n  {name: 'type', label: 'Type', rules: [{ required: true, message: 'Missing type' }], component: 'Select', options: areas, defaultValue: null},\n  {name: 'name', label: 'Name', rules: [{ required: true }], component: 'Input', defaultValue: null},\n  {name: 'label', label: 'Label', rules: [{ required: true }], component: 'Input', defaultValue: null},\n]\nexport const customFields = [...unionFields, {name: 'collect', label: 'Collect', rules: [{ required: true }], component: 'TextArea', defaultValue: null},]\nexport const dateFields = [\n  ...unionFields,\n  {name: 'days', label: 'Days of week', rules: [{ required: true }], component: 'WeekDays', defaultValue: daysOfWeek },\n  {name: 'startDay', label: 'Start Day', rules: [{ required: true }], component: 'DatePicker', defaultValue: null },\n  {name: 'limit', label: 'Limit', rules: [{ required: true }], component: 'InputNumber', defaultValue: 0 },\n]\nexport const integerFields = [\n  ...unionFields,\n  {name: 'from', label: 'From', rules: [{ required: true }], component: 'InputNumber', defaultValue: 1 },\n  {name: 'to', label: 'To', rules: [{ required: true }], component: 'InputNumber', defaultValue: 10 },\n  {name: 'length', label: 'Length', rules: [{ required: true }], component: 'InputNumber', defaultValue: 10 },\n]\nexport const components = {\n  Input, InputNumber, DatePicker, Select, TextArea, WeekDays\n}\nexport const selectByType = cond<string, any[]>([\n  [equals('custom'), always(customFields)],\n  [equals('integer'), always(integerFields)],\n  [equals('dates'), always(dateFields)],\n  [T, always([])]\n])\n\nexport const onFinish = curry((\n  dispatch: any, state: any, values: any\n) => pipe(\n  indexBy<any>(prop('name')),\n  pluck('value'),\n  mergeAndRestruct(\n    baseColumn,\n    'options'\n  ),\n  (newValues)=> dispatch(createColumn(newValues))\n)(state.fields))\n\nexport const extractValueByComponent = curry((\n  component, event\n) => cond<any, any>([\n  [\n    includes(\n      __,\n      ['Input', 'TextArea']\n    ), pipe(\n      always(event),\n      path(['target', 'value'])\n    )\n  ],\n  [\n    equals('DatePicker'), pipe(\n      always(event),\n      (e)=>e.format('DD.MM.YYYY')\n    )\n  ],\n  [\n    includes(\n      __,\n      ['InputNumber', 'Select']\n    ), compose(always(event))\n  ],\n  [equals('WeekDays'), compose(always(event))]\n])(component))\n// (component: any)=> React.createElement(component)\nexport const getReactComponentFromCollect = pipe<Field, any, JSX.Element>(\n  prop('component'),\n  prop(\n    __,\n    components\n  )\n)\nexport const addValueAndOnChange: any = (dispatch: AppDispatch)=>chain(\n  assoc('onChange'),\n  curry((\n    props: any, e: any\n  )=>pipe<Field, any, any>(\n    converge(\n      mergeRight,\n      [\n        pick(['name']), always(pipe<any, any, any>(\n          extractValueByComponent(props.component),\n          objOf('value')\n        )(e))\n      ]\n    ),\n    dispatch\n  )(props))\n)\n","/home/noname001/react-typescript-data-gen/packages/app/src/features/generator/ColumnFilters.tsx",[],"/home/noname001/react-typescript-data-gen/packages/app/src/react-app-env.d.ts",["94","95"],"/// <reference types=\"react-scripts\" />\ninterface GeneratorState {\n  columns: ColumnType[]\n  rows: any[]\n  limiting: TypeLimiting\n}\ntype ColumnType<T> = {\n  name: string\n  label: string\n  type: string\n  collect: string[]\n  options: T\n} \ntype Option = {\n  from?: Date | number\n  to?: Date | number\n  random: boolean\n}\ntype OptionDate = Option & {\n  days?: number[]\n  startDate?: any\n  endDate?: any\n}\ntype OptionNumber = Option & {\n  step: number\n  ceil: boolean\n}\ntype OptionString = {\n  length: number\n}\n\ninterface ObjectLiteral {\n  [key: string]: any\n}\n\nfunction rangeNumber(range: Range<number>): number[]\n\ndeclare function nestedFunc(arr: number): string[];\n//  function lenFunc(s: string): number;\nfunction lenFunc(num: number): nestedFunc;\n\ntype AppDispatch = ThunkDispatch<RootState, any, AnyAction>; \ntype TypeLimiting = (null | number | ColumnType.name)\ntype Nullable<T> = T | null;\nexport enum DaysOfWeek {\n  Sun = 0,\n  Mon = 1,\n  Tue = 2,\n  Wed = 3,\n  Thu = 4,\n  Fri = 5,\n  Sat = 6\n}\nexport enum Interval {\n  days = 'days',\n  weeks = 'weeks',\n  hours = 'hours'\n}\n\ninterface IDateOption {\n  days: number[]\n  lengthDays: number\n  dates: string[]\n  limit: number\n  mode: 'week'|'range'\n  startDate: any\n  endDate: string\n}\n\ntype Field = {\n  name: string\n  label: string\n  component: string\n  value: any\n  defaultValue: any\n  rules: any[]\n  onChange?: any\n}\n\ntype FormField = {\n  fields: Field[]\n}\n\ntype Day = {\n  label: string\n  abbr: string\n  active: boolean\n}","/home/noname001/react-typescript-data-gen/packages/app/src/components/WeekDays.tsx",["96"],"import { Button, Space } from 'antd'\nimport { lensProp, not, over, pipe, __ } from 'ramda'\nimport React from 'react'\nimport { AppDispatch, Day } from '../react-app-env'\nimport { findAndMerge } from '../utils/popular'\nexport const setDay = (\n  day: Day, days: Day[], setDays: AppDispatch\n): any => pipe(\n  over<any,any>(\n    lensProp('active'),\n    not\n  ),\n  findAndMerge(\n    days,\n    __,\n    'abbr'\n  ),\n  setDays\n)(day)\n\ntype WeekDays = {\n  value: Day[],\n  onChange: any\n}\nexport const WeekDays = ({ value, onChange }: WeekDays): JSX.Element => (\n  <Space>\n    { \n      value.map((\n        day: Day, idx: number\n      ) => <Button\n        key={ idx }\n        onClick={ () => setDay(\n          day,\n          value,\n          onChange\n        ) }\n        shape=\"circle\"\n        type={ day.active ? 'dashed' : 'primary' }\n      >\n        {day.abbr}\n      </Button>)\n    }\n  </Space>\n)\n",{"ruleId":"97","severity":1,"message":"98","line":108,"column":8,"nodeType":"99","messageId":"100","endLine":108,"endColumn":43},{"ruleId":"97","severity":1,"message":"98","line":152,"column":8,"nodeType":"99","messageId":"100","endLine":152,"endColumn":30},{"ruleId":"97","severity":1,"message":"98","line":53,"column":28,"nodeType":"101","messageId":"100","endLine":53,"endColumn":49},{"ruleId":"97","severity":1,"message":"98","line":159,"column":30,"nodeType":"101","messageId":"100","endLine":159,"endColumn":51},{"ruleId":"97","severity":1,"message":"98","line":160,"column":27,"nodeType":"101","messageId":"100","endLine":160,"endColumn":48},{"ruleId":"97","severity":1,"message":"98","line":161,"column":31,"nodeType":"101","messageId":"100","endLine":161,"endColumn":52},{"ruleId":"102","severity":1,"message":"103","line":2,"column":168,"nodeType":"104","messageId":"105","endLine":2,"endColumn":171},{"ruleId":"106","severity":1,"message":"107","line":2,"column":168,"nodeType":"104","messageId":"108","endLine":2,"endColumn":171},{"ruleId":"102","severity":1,"message":"109","line":1,"column":229,"nodeType":"104","messageId":"105","endLine":1,"endColumn":234},{"ruleId":"106","severity":1,"message":"110","line":1,"column":229,"nodeType":"104","messageId":"108","endLine":1,"endColumn":234},{"ruleId":"102","severity":1,"message":"111","line":6,"column":3,"nodeType":"104","messageId":"105","endLine":6,"endColumn":7},{"ruleId":"106","severity":1,"message":"112","line":6,"column":3,"nodeType":"104","messageId":"108","endLine":6,"endColumn":7},{"ruleId":"102","severity":1,"message":"113","line":7,"column":3,"nodeType":"104","messageId":"105","endLine":7,"endColumn":10},{"ruleId":"106","severity":1,"message":"114","line":7,"column":3,"nodeType":"104","messageId":"108","endLine":7,"endColumn":10},{"ruleId":"102","severity":1,"message":"115","line":57,"column":30,"nodeType":"104","messageId":"116","endLine":57,"endColumn":41},{"ruleId":"106","severity":1,"message":"117","line":57,"column":30,"nodeType":"104","messageId":"108","endLine":57,"endColumn":41},{"ruleId":"106","severity":1,"message":"118","line":36,"column":10,"nodeType":"104","messageId":"108","endLine":36,"endColumn":21},{"ruleId":"106","severity":1,"message":"119","line":40,"column":10,"nodeType":"104","messageId":"108","endLine":40,"endColumn":17},{"ruleId":"106","severity":1,"message":"120","line":25,"column":47,"nodeType":"104","messageId":"108","endLine":25,"endColumn":55},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","ArrowFunctionExpression","@typescript-eslint/no-unused-vars-experimental","Import 'tap' is declared but its value is never read. Allowed unused names must match /^_/.","Identifier","unusedWithIgnorePattern","@typescript-eslint/no-unused-vars","'tap' is defined but never used.","unusedVar","Import 'xprod' is declared but its value is never read. Allowed unused names must match /^_/.","'xprod' is defined but never used.","Variable 'Just' is declared but its value is never read. Allowed unused names must match /^_/.","'Just' is assigned a value but never used.","Variable 'Nothing' is declared but its value is never read. Allowed unused names must match /^_/.","'Nothing' is assigned a value but never used.","Parameter 'values' is declared but its value is never read.","unused","'values' is defined but never used.","'rangeNumber' is defined but never used.","'lenFunc' is defined but never used.","'WeekDays' is assigned a value but never used."]